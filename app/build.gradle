apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

//apply plugin: 'com.hujiang.android-aspectjx'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.sitlink.armrestmanagerclient2"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    buildTypes {
        release {
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
//    implementation project(':LibMarsdaemon')
    implementation 'com.squareup.okhttp3:okhttp:4.4.1'
    implementation 'org.conscrypt:conscrypt-android:2.2.1'
    implementation 'com.jaredrummler:android-processes:1.1.1'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.zxing:core:3.2.1'
    api 'com.google.code.gson:gson:2.7'
//    implementation project(':device-push-client')
//    implementation project(':sitlinklib')
}

//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//
//final def log = project.logger
//project.android.applicationVariants.all {
//    JavaCompile javaCompile = it.javaCompile
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         //使用java8
//                         "-1.8",
//                         //aspectJ处理的源文件的输入目录
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         //aspectJ编译器的class path
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         //生成后的文件的输出目录
//                         "-d", javaCompile.destinationDir.toString(),
//                         //Java程序的类查找路径
//                         "-classpath", javaCompile.classpath.asPath,
//                         //覆盖引导类的位置  Android中使用Android.jar 而不是JDK
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler);
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                    log.warn message.message, message.thrown
//                    break;
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}
